import random  # Implements pseudo-random number generators

def initialize_piles(num_piles):
    """Initialize the piles with a random number of counters."""
    return [random.randint(1, 10) for _ in range(num_piles)]  # Creates a list of num_piles with random integers

def display_piles(piles):
    """Display the current status of the piles."""
    print("\nPiles Status:")  # Header for the pile status
    for i, pile in enumerate(piles):  # Loop through the piles
        print(f"Pile {i + 1}: {pile} {'|' * pile}")  # Print the pile number and its counter count
    print()  # Newline for spacing

def is_game_over(piles):
    """Check if the game is over (all piles are empty)."""
    return sum(piles) == 0  # Returns True if all piles are empty

def get_valid_input(prompt, valid_range, max_attempts=3):
    """Get valid input from the player with a limit on attempts."""
    attempts = 0  # Initialize the number of attempts
    while attempts < max_attempts:  # Loop until maximum attempts are reached
        try:
            choice = int(input(prompt))  # Prompt for input
            if choice in valid_range:  # Check if input is valid
                return choice  # Return the valid choice
            else:
                print(f"Invalid choice, Please choose from {valid_range}.")  # Notify of invalid choice
        except ValueError:  # Handle input conversion errors
            print("Invalid input. Please enter a number.")  # Notify of invalid input
        attempts += 1  # Increment the attempt counter
    print("Too many invalid attempts. Exiting the game.")  # Notify of too many attempts
    exit()  # Exit the program


def player_move(piles, player_name):
    """Handle the player's move, returning True if the player loses."""
    while True:  # Start an infinite loop to ask for valid input
        pile_choice = get_valid_input(f"{player_name}, choose a pile (1 to {len(piles)}): ", list(range(1, len(piles) + 1))) - 1
        if piles[pile_choice] == 0:  # Check if the chosen pile is empty
            print("This pile is empty. Choose a different pile.")  # Notify of empty pile
            continue  # Restart the loop if the pile is empty

        counters_to_remove = get_valid_input(f"{player_name}, how many counters to remove from pile {pile_choice + 1}? ", range(1, piles[pile_choice] + 1))
        piles[pile_choice] -= counters_to_remove  # Decrease the number of counters in the chosen pile
        break  # Exit the loop after a valid move

    if is_game_over(piles):  # Check if the game is over after the player’s move
        print(f"{player_name} took the last counter and loses")  # Notify the player they lost
        return True  # Return True if the player loses
    return False  # Return False if the game is still ongoing

def make_optimal_move(piles):
    """Make an optimal move for the computer player."""
    nim_sum = 0  # Initialize the Nim sum to zero
    for pile in piles:  # Loop through each pile
        nim_sum ^= pile  # Compute the Nim sum using XOR operation

    if nim_sum != 0:  # Check if the Nim sum is non-zero
        for i in range(len(piles)):  # Loop through the pile indices
            if (piles[i] ^ nim_sum) < piles[i]:  # Check if a winning move exists
                counters_to_remove = piles[i] - (piles[i] ^ nim_sum)  # Calculate how many counters to remove
                print(f"CPU chooses pile {i + 1} and removes {counters_to_remove} counters.")  # Notify the move
                piles[i] -= counters_to_remove  # Update the pile
                return True  # Return True to indicate a move was made
    return False  # Return False if no optimal move is possible


def computer_move(piles, name, optimal_chance):
    """Handle the computer's move."""
    print(f"\n{name}'s turn")  # Print the computer’s turn message
    if random.random() < optimal_chance:  # Check if the CPU will make an optimal move
        if make_optimal_move(piles) and is_game_over(piles):  # Call the function to make an optimal move
            print(f"{name} took the last counter and loses")  # Notify if the CPU loses
            return True  # Return True if the CPU loses
    else:  # If not making an optimal move
        print("CPU makes a random move.")  # Notify that the CPU is making a random move
        while True:  # Start a loop for making a valid random move
            pile_choice = random.choice(range(len(piles)))  # Randomly select a pile
            if piles[pile_choice] > 0:  # Check if the chosen pile is not empty
                counters_to_remove = random.randint(1, piles[pile_choice])  # Randomly select how many counters to remove
                print(f"CPU chooses pile {pile_choice + 1} and removes {counters_to_remove} counters.")  # Notify the selected pile and counters removed
                piles[pile_choice] -= counters_to_remove  # Update the pile
                break  # Exit the loop after making a valid move

    if is_game_over(piles):  # Check if the game is over after the CPU's move
        print(f"{name} took the last counter and loses")  # Notify if the CPU loses
        return True  # Return True if the CPU loses
    return False  # Return False if the game is still ongoing

def kieran_round_transition():
    """Handle the transition for Kieran after he loses."""
    print("\nAs Kieran takes the last stick, a sharp pain strikes his chest.")
    print("He stumbles back, dropping to the floor, clutching his heart. 'NO... I CAN DO THIS!'")
    print("His voice echoes through the room as he slowly forces himself up.")
    print("With a smirk, Kieran steps back, pulling out a strange helmet from behind him.")
    print("The helmet is shaped like a hot chocolate mug, large black eyes staring blankly ahead.")
    print("He places it on his head, transforming his demeanor.")
    print("Kieran looks directly at you, his voice lowering to a growl, 'It's demon time.'")
    print("You brace yourself as the second round begins, this time with 5 piles!")

def mr_nagras_transition():
    """Handle the transition for Mr. Nagras after his son loses."""
    print("\nTears seem to run down the slime monster as he runs out of the stadium crying.")
    print("You see Mr. Nagras look at his son, chuckle, and look back at you.")
    print("'My turn. If you lose, you fail my class.'")
    print("With a smirk, he says, 'You think you can defeat me? Let's see what you've got!'\n")

def goku_transition():
    """Handle the transition for Goku after he loses."""
    print("\nAfter grabbing the last stick, Goku flies back to the edge of the stadium, hitting the wall due to the massive blast of power.")
    print("He gets up and shouts, 'I WON'T GIVE UP YETTTTTTTT!'")
    print("A glowing bluish-grey light starts to form around him.")
    print("'AUAHGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG!' he screams.")
    print("His hair turns grey, and his aura begins to destroy the stadium.")
    print("He sits back down, saying, 'You're not ready for this,'")

def start_first_round(player_name, cpu_name, optimal_chance):
    """Start the first round with 3 piles."""
    piles = initialize_piles(num_piles=3)  # Initialize with 3 piles
    print("\nThe first round begins with 3 piles")  # Message for clarity.

    while True:
        display_piles(piles)
        if player_move(piles, player_name):  # Restrict choice to piles 1-3
            print(f"You lose against {cpu_name}.")
            return False  # Return False to indicate game over
        if computer_move(piles, cpu_name, optimal_chance):
            return True  # Return True to indicate game over

def start_second_round(player_name, cpu_name, optimal_chance):
    """Start the second round with 5 piles."""
    piles = initialize_piles(num_piles=5)  # Initialize with 5 piles
    print("\nThe second round begins with 5 piles")  # Message for clarity.

    while True:
        display_piles(piles)
        if player_move(piles, player_name):  # Restrict choice to piles 1-5
            print(f"You lose against {cpu_name}.")
            return False  # Return False to indicate game over
        if computer_move(piles, cpu_name, optimal_chance):
            return True  # Return True to indicate game over

def nim_game():
    """Main game loop for Nim."""
    player_name_1 = input("Player 1, please enter your name: ")

    while True:
        game_mode = input("Do you want to play against another player or a CPU? Type 'P' for player or 'C' for CPU: ").strip().upper()
        if game_mode in ['P', 'C']:
            break

    if game_mode == 'P':
        player_name_2 = input("Player 2, please enter your name: ")
        against_cpu = False
    else:
        while True:
            cpu_choice = input("Choose your CPU opponent: 'M' for Mr. Nagras Secret Mutant Son (easy), 'K' for Kieran (hard), 'G' for Goku (extreme): ").strip().upper()
            if cpu_choice in ['M', 'K', 'G']:
                break

        cpu_levels = {'M': (0.30, "Mr. Nagras Secret Mutant Son"), 'K': (0.50, "Kieran"), 'G': (0.70, "Goku")}
        optimal_chance, player_name_2 = cpu_levels[cpu_choice]
        against_cpu = True

        if cpu_choice == 'K':
            print("\nAs you come to the arena, you see a small figure sitting at the opposite side of the table.")
            print("You slowly approach; his aura is overwhelming, sending a shiver down your spine.")
            print("The atmosphere crackles with tension as he looks up, a confident smirk dancing on his lips.")
            print("'Hey, I'm Kieran,' he says, his voice dripping with mockery. 'You ready to lose?'")
            input("Press Enter to gather your thoughts, as the round begins...")

        elif cpu_choice == 'M':
            print("\nYou step into the arena and see a tall, slender figure standing above a slime monster.")
            print("As the lighting gets better, you realize it's your computer science teacher.")
            print("'Mr. Nagras?!?!?' you exclaim, confusion in your voice.")
            print("'I'm here with my secret mutant son, and he's gonna fight you!'")
            input("Press 'Enter' to sit down as the round begins...")

        elif cpu_choice == 'G':
            print("\nYou step into the arena, and before you sits a tall man with big black hair.")
            print("You sense a menacing presence, feeling too scared to sit down.")
            print("'Don't worry,' he reassures you. 'I won't hurt you. I'm just here to have fun.'")
            input("Press Enter to sit down as the round begins...")

    # First round starts
    round_1_winner = start_first_round(player_name_1, player_name_2, optimal_chance)

    if against_cpu:
        if cpu_choice == 'K':
            if round_1_winner:
                kieran_round_transition()
                round_2_winner = start_second_round(player_name_1, player_name_2, optimal_chance)

        elif cpu_choice == 'M':
            if round_1_winner:
                mr_nagras_transition()
                round_2_winner = start_second_round(player_name_1, player_name_2, optimal_chance)

        elif cpu_choice == 'G':
            if round_1_winner:
                goku_transition()
                round_2_winner = start_second_round(player_name_1, player_name_2, optimal_chance)

    else:  # Player vs. player mode
        if round_1_winner:
            print(f"{player_name_2} wins round 1")
            round_2_winner = start_second_round(player_name_1, player_name_2, 0.30)  # Set easy difficulty for player 2

        if round_2_winner:
            print(f"{player_name_1} wins round 2")

# Start the game
if __name__ == "__main__":
    nim_game()
